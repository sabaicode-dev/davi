# name: CI/CD Pipeline for Auth Service

# on:
#   pull_request:
#     branches: [main]
#   push:
#     branches: [main]

# defaults:
#   run:
#     working-directory: ./apps/backend/auth-service

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0 # Ensures all branches and tags are fetched

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"

#       - name: Configure npm to use GitHub Packages
#         run: |
#           echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
#           echo "@sabaicode-dev:registry=https://npm.pkg.github.com" >> ~/.npmrc

#       - name: Install dependencies
#         run: yarn install

#       - name: Run build
#         run: yarn build

#       - name: Archive build artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: build
#           path: ./apps/backend/auth-service/build

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"

#       - name: Download build artifacts
#         uses: actions/download-artifact@v4
#         with:
#           name: build
#           path: ./apps/backend/auth-service/build

#       - name: Prepare Deployment Directories
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_IP }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           port: 22
#           script: |
#             mkdir -p /home/ubuntu/apps/auth-service/build
#             mkdir -p /home/ubuntu/apps/auth-service/build/configs

#       - name: Copy files to EC2
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.EC2_IP }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           port: 22
#           source: "./apps/backend/auth-service/build/*"
#           target: "/home/ubuntu/apps/auth-service/build"
#           strip_components: 4

#       - name: Configure npm to use GitHub Packages on EC2
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_IP }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           port: 22
#           script: |
#             echo "@sabaicode-dev:registry=https://npm.pkg.github.com" > /home/ubuntu/apps/auth-service/build/.npmrc
#             echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" >> /home/ubuntu/apps/auth-service/build/.npmrc

#       - name: Create .env.production File with Secrets
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_IP }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           port: 22
#           script: |
#             mkdir -p /home/ubuntu/apps/auth-service/build/configs
#             echo "NODE_ENV=${{ secrets.NODE_ENV }}" > /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "PORT=${{ secrets.AUTH_PORT }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "AWS_COGNITO_REGION=${{ secrets.AWS_COGNITO_REGION }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "AWS_COGNITO_USER_POOL_ID=${{ secrets.AWS_COGNITO_USER_POOL_ID }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "AWS_COGNITO_CLIENT_ID=${{ secrets.AWS_COGNITO_CLIENT_ID }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "AWS_COGNITO_CLIENT_SECRET=${{ secrets.AWS_COGNITO_CLIENT_SECRET }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "AWS_COGNITO_IDENTITY_POOL_ID=${{ secrets.AWS_COGNITO_IDENTITY_POOL_ID }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "AWS_COGNITO_DOMAIN=${{ secrets.AWS_COGNITO_DOMAIN }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "AWS_REDIRECT_URI=${{ secrets.AWS_REDIRECT_URI }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "CLIENT_URL=${{ secrets.CLIENT_URL }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "USER_SERVICE_URL=${{ secrets.USER_SERVICE_URL }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production
#             echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> /home/ubuntu/apps/auth-service/build/configs/.env.production

#       - name: Install Dependencies and Restart PM2 on EC2
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_IP }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           port: 22
#           script: |
#             # Initialize NVM if it's installed, or install it if missing
#             export NVM_DIR="$HOME/.nvm"
#             if [ -s "$NVM_DIR/nvm.sh" ]; then
#               . "$NVM_DIR/nvm.sh"
#             else
#               curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
#               . "$NVM_DIR/nvm.sh"
#             fi

#             # Install Node.js, Yarn, and PM2 if missing
#             nvm install 20
#             nvm use 20
#             npm install -g yarn pm2
#             . ~/.bashrc  # Ensure the environment is updated for non-interactive shells

#             # Navigate to the application directory and install production dependencies
#             cd /home/ubuntu/apps/auth-service/build
#             yarn install --production

#             # Start or restart the app using PM2 with direct PM2 commands
#             if pm2 show auth-service > /dev/null; then
#               echo "Application is running. Restarting..."
#               pm2 restart auth-service --update-env
#             else
#               echo "Application is not running. Starting..."
#               pm2 start server.js --name auth-service --update-env
#             fi
